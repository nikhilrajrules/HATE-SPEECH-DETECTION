{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ger_task2_countvect_xgboostipynb","provenance":[],"collapsed_sections":[],"mount_file_id":"1cbIoeibpK_zg-R6Q4m0vd1M55G325s7U","authorship_tag":"ABX9TyOK73Y8dHIR76Wu05NDJwl1"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"CjHRnnn6IHqw","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593362920896,"user_tz":-330,"elapsed":1142,"user":{"displayName":"NIKHIL RAJ","photoUrl":"","userId":"13390581239814715976"}}},"source":["#imports\n","from sklearn import model_selection, preprocessing, linear_model, naive_bayes, metrics, svm\n","from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n","from sklearn import decomposition, ensemble\n","import pandas as pd\n","import xgboost, numpy, textblob, string\n","from keras.preprocessing import text, sequence\n","from keras import layers, models, optimizers"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"id":"gnyzkUk5I1q8","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593362920900,"user_tz":-330,"elapsed":1128,"user":{"displayName":"NIKHIL RAJ","photoUrl":"","userId":"13390581239814715976"}}},"source":["#training data\n","df_train=pd.read_csv('/content/drive/My Drive/minor/german_dataset/german_dataset.tsv',sep='\\t', encoding=\"utf-8\")\n","df_train=df_train[df_train.task_2!='NONE']"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"id":"yUBqMn6hJAfa","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593362920901,"user_tz":-330,"elapsed":1105,"user":{"displayName":"NIKHIL RAJ","photoUrl":"","userId":"13390581239814715976"}}},"source":["#training and validation split\n","train_x, valid_x, train_y, valid_y = model_selection.train_test_split(df_train['text'], df_train['task_2'],test_size=0.15,random_state=140) "],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"id":"cXU_IWYjJKVU","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593362920904,"user_tz":-330,"elapsed":1074,"user":{"displayName":"NIKHIL RAJ","photoUrl":"","userId":"13390581239814715976"}}},"source":["# label encode the target variable \n","encoder = preprocessing.LabelEncoder() #label encoder\n","train_y = encoder.fit_transform(train_y) #encoding label for training data\n","valid_y = encoder.fit_transform(valid_y) #encoding label for validation data"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"id":"Qfk6KOPLJUSC","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593362920906,"user_tz":-330,"elapsed":1045,"user":{"displayName":"NIKHIL RAJ","photoUrl":"","userId":"13390581239814715976"}}},"source":["#testing data\n","df_test=pd.read_csv('/content/drive/My Drive/minor/german_dataset/hasoc_de_test_gold.tsv',sep='\\t', encoding=\"utf-8\") \n","df_test=df_test[df_test.task_2!='NONE']\n","test_y = encoder.fit_transform(df_test['task_2']) #encoding the label of testing data"],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"id":"-1S4rHusJYA0","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593362920908,"user_tz":-330,"elapsed":1007,"user":{"displayName":"NIKHIL RAJ","photoUrl":"","userId":"13390581239814715976"}}},"source":["# create a count vectorizer object \n","count_vect = CountVectorizer(analyzer='word', token_pattern=r'\\w{1,}')\n","count_vect.fit(df_train['text'])\n","\n","# transform the training and validation data using count vectorizer object\n","xtrain_count =  count_vect.transform(train_x)  #get count vector features for training data\n","xvalid_count =  count_vect.transform(valid_x)  #get count vector features for validation data\n","x_count =  count_vect.transform(df_test['text'])  #get count vector features for testing data"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"id":"g_vTH_1aJfp3","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593362920909,"user_tz":-330,"elapsed":969,"user":{"displayName":"NIKHIL RAJ","photoUrl":"","userId":"13390581239814715976"}}},"source":["def model(classifier, feature_vector_train, label, feature_vector_valid,feature_vector_test):\n","    # fit the training dataset on the classifier\n","    classifier.fit(feature_vector_train, label)\n","    \n","    # predict the labels on validation dataset\n","    predictions_valid = classifier.predict(feature_vector_valid)\n","\n","    # predict the labels on testing dataset\n","    predictions_test = classifier.predict(feature_vector_test)\n","\n","    print(\"classification report for validation\")\n","    print(metrics.classification_report(predictions_valid,valid_y))\n","    print(\"classification report for testing\")\n","    print(metrics.classification_report(predictions_test,test_y))\n"],"execution_count":23,"outputs":[]},{"cell_type":"code","metadata":{"id":"fjD6P93UJicq","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":391},"executionInfo":{"status":"ok","timestamp":1593362922648,"user_tz":-330,"elapsed":2686,"user":{"displayName":"NIKHIL RAJ","photoUrl":"","userId":"13390581239814715976"}},"outputId":"f12bb965-383f-4b42-955a-c1f256d871d2"},"source":["# calling the xgboost classifier model for training ,validation and testing\n","model(xgboost.XGBClassifier(), xtrain_count.tocsc(), train_y, xvalid_count.tocsc(),x_count.tocsc())"],"execution_count":24,"outputs":[{"output_type":"stream","text":["classification report for validation\n","              precision    recall  f1-score   support\n","\n","           0       0.50      0.47      0.48        15\n","           1       0.78      0.58      0.67        43\n","           2       0.12      0.50      0.20         4\n","\n","    accuracy                           0.55        62\n","   macro avg       0.47      0.52      0.45        62\n","weighted avg       0.67      0.55      0.59        62\n","\n","classification report for testing\n","              precision    recall  f1-score   support\n","\n","           0       0.10      0.44      0.16         9\n","           1       0.92      0.59      0.72       121\n","           2       0.06      0.17      0.08         6\n","\n","    accuracy                           0.56       136\n","   macro avg       0.36      0.40      0.32       136\n","weighted avg       0.83      0.56      0.65       136\n","\n"],"name":"stdout"}]}]}